name: Django CI and Delivery

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file for Django
        run: |
          echo "DSN_SENTRY=${{ secrets.DSN_SENTRY }}" > .env
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DATABASE_NAME=${{ secrets.DJANGO_DATABASE_NAME }}" >> .env

      - name: Run linting
        run: |
          flake8
        if: success()

      - name: Run Tests
        run: |
          python manage.py test
        if: success()

      - name: Ensure test coverage is above 80%
        run: |
          pytest --cov-fail-under=80
        if: success()

      - name: Export environment variables for deployment
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env
          echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> .env
          echo "EC2_USERNAME=${{ secrets.EC2_USERNAME }}" >> .env
          echo "EC2_SECRET_KEY=${{ secrets.EC2_SECRET_KEY }}" >> .env

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          ecr: auto
        if: success()

      - name: Setup SSH
        run: |
          echo "${{ secrets.EC2_SECRET_KEY }}" > mysshkey.pem
          chmod 600 mysshkey.pem

      - name: Ensure Docker service is installed and running on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i mysshkey.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'if ! [ -x "$(command -v docker)" ]; then sudo apt update -y && sudo apt upgrade -y && sudo apt install -y docker.io && sudo usermod -aG docker ${{ secrets.EC2_USERNAME }} && newgrp docker && sudo chmod 777 /var/run/docker.sock && sudo systemctl start docker && sudo systemctl enable docker; fi'
          ssh -o StrictHostKeyChecking=no -i mysshkey.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'sudo apt install python3 -y && sudo apt install python3-pip -y && sudo apt install python3-django -y'
        if: success()

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: success()

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sirmattheo/oc-lettings-site:${{ github.sha }}
        if: success()

      - name: Deploy Docker to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i mysshkey.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'sudo docker pull sirmattheo/oc-lettings-site:${{ github.sha }}'
          ssh -o StrictHostKeyChecking=no -i mysshkey.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'sudo docker stop oc-lettings-site || true'
          ssh -o StrictHostKeyChecking=no -i mysshkey.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'sudo docker rm oc-lettings-site || true'
          ssh -o StrictHostKeyChecking=no -i mysshkey.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'sudo docker run -d -p 8000:8000 --name oc-lettings-site sirmattheo/oc-lettings-site:${{ github.sha }}'
        if: success()
