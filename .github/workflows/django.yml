name: Django CI and Delivery

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Creates and sets environment variable
      id: dot_env_creation
      run: |
        echo "DSN_SENTRY=${{ secrets.DSN_SENTRY }}" > .env
        echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo "DJANGO_DATABASE_NAME=${{ secrets.DJANGO_DATABASE_NAME }}" >> .env

    - name: Run linting
      run: |
        flake8
      if: ${{ steps.dot_env_creation.outcome }} == "success"
      
    - name: Run Tests
      run: |
        python manage.py test
      if: ${{ steps.dot_env_creation.outcome }} == "success"

    - name: Ensures test coverage is above 80%
      id: coverage_test
      run: |
        pytest --cov-fail-under=80
      if: ${{ steps.dot_env_creation.outcome }} == "success"

    - name: Export environment variables
      run: |
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
        echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" > .env
        echo "EC2_HOST=${{ secrets.EC2_HOST }}" > .env
        echo "EC2_USERNAME=${{ secrets.EC2_USERNAME }}" > .env
        echo "EC2_SECRET_KEY=${{ secrets.EC2_SECRET_KEY }}" > .env

    - name: Log in to Docker Hub
      id: dockerhub_login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        ecr: auto
        logout: true
        if: ${{ steps.coverage_test.outcome }} == "success"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up SSH key
      run: |
        env
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SECRET_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p 22 ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        sudo apt-get install sshpass
          
    - name: Ensure Docker is installed on EC2
      uses: actions/checkout@v4
      env: 
        PRIVATE_KEY: ${{ secrets.EC2_SECRET_KEY }}
        HOST_NAME: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_PASSWD: ''

    - name: Checking Docker    
      run: |
        ssh -i ~/.ssh/id_rsa -v -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} <<'ENDSSH'
                              
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo groupadd docker
            sudo usermod -aG docker $(whoami)
            sudo usermod -a -G docker ${{ secrets.EC2_USERNAME }}
            sudo systemctl restart docker
          else
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo groupadd docker
            sudo usermod -aG docker $(whoami)
            sudo usermod -a -G docker ${{ secrets.EC2_USERNAME }}
            sudo systemctl restart docker
          fi
          
        EOF
                 
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker images
      id: packaging
      uses: docker/build-push-action@v5.0.0
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: sirmattheo/oc-lettings-site:${{ github.sha }},sirmattheo/oc-lettings-site:latest
      if: ${{ steps.dockerhub_login.outcome }} == "success"
    
      
    - name: Deploy Docker to AWS (EC2)
      id: deployment

      uses: actions/checkout@v4
      
      with:
        ssh_host: ${{ secrets.EC2_HOST }}
        ssh_user: ${{ secrets.EC2_USERNAME }}
        ssh_private_key: ${{ secrets.EC2_SECRET_KEY }}
        use_stack: 'true'    
        script: |
          whoami
          sshpass -p '${ EC2_PASSWD }' ssh -v -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} <<'ENDSSH'
          docker stop sirmattheo/oc-lettings-site || true
          docker rm sirmattheo/oc-lettings-site || true
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings-site:${{ github.sha }}
          docker run -d -p 8000:8000 --name sirmattheo ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings-site:${{ github.sha }}
        if: ${{ steps.packaging.outcome }} == "success"
